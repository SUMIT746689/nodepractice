// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"pos/ent/supplier"
	"pos/internal/domain"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Supplier is the model entity for the Supplier schema.
type Supplier struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Representative holds the value of the "representative" field.
	Representative domain.Representative `json:"representative,omitempty"`
	selectValues   sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Supplier) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case supplier.FieldRepresentative:
			values[i] = new([]byte)
		case supplier.FieldID:
			values[i] = new(sql.NullInt64)
		case supplier.FieldName, supplier.FieldAddress, supplier.FieldEmail:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Supplier fields.
func (s *Supplier) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case supplier.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case supplier.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case supplier.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				s.Address = value.String
			}
		case supplier.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				s.Email = value.String
			}
		case supplier.FieldRepresentative:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field representative", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.Representative); err != nil {
					return fmt.Errorf("unmarshal field representative: %w", err)
				}
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Supplier.
// This includes values selected through modifiers, order, etc.
func (s *Supplier) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// Update returns a builder for updating this Supplier.
// Note that you need to call Supplier.Unwrap() before calling this method if this Supplier
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Supplier) Update() *SupplierUpdateOne {
	return NewSupplierClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Supplier entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Supplier) Unwrap() *Supplier {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Supplier is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Supplier) String() string {
	var builder strings.Builder
	builder.WriteString("Supplier(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("name=")
	builder.WriteString(s.Name)
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(s.Address)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(s.Email)
	builder.WriteString(", ")
	builder.WriteString("representative=")
	builder.WriteString(fmt.Sprintf("%v", s.Representative))
	builder.WriteByte(')')
	return builder.String()
}

// Suppliers is a parsable slice of Supplier.
type Suppliers []*Supplier
