// Code generated by ent, DO NOT EDIT.

package supplier

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the supplier type in the database.
	Label = "supplier"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldRepresentative holds the string denoting the representative field in the database.
	FieldRepresentative = "representative"
	// Table holds the table name of the supplier in the database.
	Table = "suppliers"
)

// Columns holds all SQL columns for supplier fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldAddress,
	FieldEmail,
	FieldRepresentative,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Supplier queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}
